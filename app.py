from flask import Flask, render_template, request, jsonify
import requests, json, re
from datetime import datetime
from pathlib import Path
from io import BytesIO

# üßæ PDF Libraries
from PyPDF2 import PdfReader, PdfWriter
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.utils import ImageReader

app = Flask(__name__)

OUTPUT_DIR = Path("outputs")
OUTPUT_DIR.mkdir(exist_ok=True)

# Load backup data
with open("data_backup.json", "r", encoding="utf-8") as f:
    backup_data = json.load(f)


@app.route("/")
def home():
    return render_template("index.html")


# ---------------------------------------------------------
# Helper: Add Header, Centered Logo, and Watermark
# ---------------------------------------------------------
def create_header_and_watermark(district, complex_code, date_obj):
    """
    Creates a polished PDF overlay with blue header, centered logo,
    structured text, and a faint footer watermark.
    """
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)

    # Blue Header Bar
    c.setFillColorRGB(0, 0.2, 0.6)
    c.rect(0, 760, 600, 40, fill=True, stroke=False)

    # Header Title
    c.setFont("Helvetica-Bold", 20)
    c.setFillColor(colors.whitesmoke)
    c.drawCentredString(300, 773, "‚öñÔ∏è eCourts Cause List")

    # Logo (centered below header)
    try:
        logo_path = Path("static/emblem.png")
        if logo_path.exists():
            logo = ImageReader(str(logo_path))
            logo_width, logo_height = 60, 60
            logo_x = (600 - logo_width) / 2
            logo_y = 700  # ‚Üì lowered by ~25 points
            c.drawImage(logo, logo_x, logo_y, width=logo_width, height=logo_height, mask='auto')
        else:
            print("‚ö†Ô∏è Local logo not found:", logo_path)
    except Exception as e:
        print("‚ö†Ô∏è Logo load failed:", e)

    # Horizontal line under logo
    c.setStrokeColorRGB(0, 0.2, 0.6)
    c.setLineWidth(1)
    c.line(80, 690, 520, 690)

    # Case Info Text
    c.setFont("Helvetica-Bold", 14)
    c.setFillColor(colors.black)
    c.drawCentredString(300, 670, f"District: {district}")
    c.drawCentredString(300, 654, f"Court Complex: {complex_code}")
    c.drawCentredString(300, 638, f"Date: {date_obj}")

    # Decorative divider line
    c.setStrokeColorRGB(0.75, 0.75, 0.75)
    c.setLineWidth(0.5)
    c.line(100, 625, 500, 625)

    # Footer (faint watermark)
    c.setFont("Helvetica-Oblique", 10)
    c.setFillColorRGB(0.6, 0.6, 0.6)
    c.drawCentredString(300, 50, "Generated by Diksha Subhedar ‚Äì eCourts Scraper")

    c.save()
    buffer.seek(0)
    return buffer



# ---------------------------------------------------------
# API: Dropdowns (States, Districts, Complexes, Courts)
# ---------------------------------------------------------
@app.route("/api/states")
def get_states():
    try:
        url = "https://services.ecourts.gov.in/ecourtindia_v6/"
        r = requests.get(url, timeout=10)
        html = r.text
        matches = re.findall(r"<option value=['\"](\d+)['\"]>([^<]+)</option>", html)
        states = [{"code": c, "name": n.strip()} for c, n in matches if c != "0"]
        if not states:
            raise Exception("Empty result")
        return jsonify(states)
    except Exception as e:
        print("‚ö†Ô∏è Using backup states:", e)
        return jsonify(backup_data["states"])


@app.route("/api/districts/<state_code>")
def get_districts(state_code):
    try:
        url = "https://services.ecourts.gov.in/ecourtindia_v6/?p=casestatus/getDistricts/"
        r = requests.post(url, data={"state_code": state_code}, timeout=10)
        data = r.json()
        return jsonify([{"code": d["dist_code"], "name": d["dist_name"]} for d in data])
    except Exception as e:
        print("‚ö†Ô∏è Using backup districts:", e)
        return jsonify(backup_data["districts"].get(state_code, []))


@app.route("/api/complexes/<state_code>/<dist_code>")
def get_complexes(state_code, dist_code):
    try:
        url = "https://services.ecourts.gov.in/ecourtindia_v6/?p=casestatus/getComplex/"
        r = requests.post(url, data={"state_code": state_code, "dist_code": dist_code}, timeout=10)
        data = r.json()
        return jsonify([{"code": c["complex_code"], "name": c["complex_name"]} for c in data])
    except Exception as e:
        print("‚ö†Ô∏è Using backup complexes:", e)
        key = f"{state_code}_{dist_code}"
        return jsonify(backup_data["complexes"].get(key, []))


@app.route("/api/courts/<state_code>/<dist_code>/<complex_code>")
def get_courts(state_code, dist_code, complex_code):
    try:
        url = "https://services.ecourts.gov.in/ecourtindia_v6/?p=casestatus/getCourts/"
        r = requests.post(url, data={"state_code": state_code, "dist_code": dist_code, "complex_code": complex_code}, timeout=10)
        data = r.json()
        return jsonify([{"code": c["court_code"], "name": c["court_name"]} for c in data])
    except Exception as e:
        print("‚ö†Ô∏è Using backup courts:", e)
        key = f"{state_code}_{dist_code}_{complex_code}"
        return jsonify(backup_data["courts"].get(key, []))


# ---------------------------------------------------------
# MAIN: Fetch & Generate Annotated PDF
# ---------------------------------------------------------
@app.route("/fetch", methods=["POST"])
def fetch_causelist():
    try:
        state = request.form.get("state")
        district = request.form.get("district")
        complex_code = request.form.get("court_complex")
        court_code = request.form.get("court_name", "")
        date_str = request.form.get("date")

        if not (state and district and complex_code and date_str):
            return jsonify({"error": "Please fill all required fields"}), 400

        date_obj = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d-%m-%Y")
        url = "https://services.ecourts.gov.in/ecourtindia_v6/?p=cause_list/getPdf_causelist"
        payload = {
            "state_code": state,
            "dist_code": district,
            "complex_code": complex_code,
            "court_code": court_code,
            "date": date_obj,
        }

        print(f"Fetching cause list: {payload}")
        r = requests.post(url, data=payload, timeout=25)
        pdf_path = OUTPUT_DIR / f"cause_list_{date_obj}.pdf"

        if "application/pdf" in r.headers.get("Content-Type", ""):
            pdf_path.write_bytes(r.content)
        else:
            blank_overlay = create_header_and_watermark(district, complex_code, date_obj)
            pdf_path.write_bytes(blank_overlay.read())

        # ‚úÖ Apply overlay (header + logo + watermark)
        overlay_buffer = create_header_and_watermark(district, complex_code, date_obj)
        overlay_reader = PdfReader(overlay_buffer)
        original_reader = PdfReader(str(pdf_path))
        writer = PdfWriter()

        for page in original_reader.pages:
            page.merge_page(overlay_reader.pages[0])
            writer.add_page(page)

        final_pdf = OUTPUT_DIR / f"cause_list_{date_obj}_annotated.pdf"
        with open(final_pdf, "wb") as out_file:
            writer.write(out_file)

        print(f"‚úÖ Final PDF saved: {final_pdf}")

        return jsonify({
            "message": "‚úÖ Cause list fetched and beautifully formatted!",
            "pdf_path": str(final_pdf)
        })

    except Exception as e:
        print("‚ùå Error:", e)
        return jsonify({"error": str(e)}), 500


if __name__ == "__main__":
    app.run(debug=True)
